0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'install', '-g', 'firmata' ]
2 info using npm@1.2.16
3 info using node@v0.10.2
4 verbose read json /usr/local/lib/package.json
5 verbose read json /usr/local/lib/package.json
6 verbose cache add [ 'firmata', null ]
7 verbose cache add name=undefined spec="firmata" args=["firmata",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: 'firmata',
8 verbose parsed url   path: 'firmata',
8 verbose parsed url   href: 'firmata' }
9 silly lockFile 2f8a23de-firmata firmata
10 verbose lock firmata /home/admin/.npm/2f8a23de-firmata.lock
11 silly lockFile 2f8a23de-firmata firmata
12 silly lockFile 2f8a23de-firmata firmata
13 verbose addNamed [ 'firmata', '' ]
14 verbose addNamed [ null, '' ]
15 silly lockFile acb7c0a4-firmata firmata@
16 verbose lock firmata@ /home/admin/.npm/acb7c0a4-firmata.lock
17 silly addNameRange { name: 'firmata', range: '', hasData: false }
18 verbose url raw firmata
19 verbose url resolving [ 'https://registry.npmjs.org/', './firmata' ]
20 verbose url resolved https://registry.npmjs.org/firmata
21 info trying registry request attempt 1 at 01:25:58
22 verbose etag "8LU76PR2CXFL3DVJD703CA9SN"
23 http GET https://registry.npmjs.org/firmata
24 http 304 https://registry.npmjs.org/firmata
25 silly registry.get cb [ 304,
25 silly registry.get   { server: 'CouchDB/1.2.1 (Erlang OTP/R15B03)',
25 silly registry.get     etag: '"8LU76PR2CXFL3DVJD703CA9SN"',
25 silly registry.get     date: 'Thu, 04 Apr 2013 05:26:00 GMT',
25 silly registry.get     'content-length': '0' } ]
26 verbose etag firmata from cache
27 silly addNameRange number 2 { name: 'firmata', range: '', hasData: true }
28 silly addNameRange versions [ 'firmata',
28 silly addNameRange   [ '0.1.0',
28 silly addNameRange     '0.1.1',
28 silly addNameRange     '0.1.2',
28 silly addNameRange     '0.1.3',
28 silly addNameRange     '0.2.0',
28 silly addNameRange     '0.2.1',
28 silly addNameRange     '0.2.2',
28 silly addNameRange     '0.2.3',
28 silly addNameRange     '0.2.4' ] ]
29 verbose addNamed [ 'firmata', '0.2.4' ]
30 verbose addNamed [ '0.2.4', '0.2.4' ]
31 silly lockFile e0c925fc-firmata-0-2-4 firmata@0.2.4
32 verbose lock firmata@0.2.4 /home/admin/.npm/e0c925fc-firmata-0-2-4.lock
33 verbose read json /home/admin/.npm/firmata/0.2.4/package/package.json
34 silly lockFile e0c925fc-firmata-0-2-4 firmata@0.2.4
35 silly lockFile e0c925fc-firmata-0-2-4 firmata@0.2.4
36 silly lockFile acb7c0a4-firmata firmata@
37 silly lockFile acb7c0a4-firmata firmata@
38 silly resolved [ { name: 'firmata',
38 silly resolved     description: 'A library to control an arduino running firmata',
38 silly resolved     version: '0.2.4',
38 silly resolved     author: { name: 'Julian Gautier' },
38 silly resolved     homepage: 'http://www.github.com/jgautier/firmata',
38 silly resolved     repository: { type: 'git', url: 'git://github.com/jgautier/firmata.git' },
38 silly resolved     main: 'lib/firmata',
38 silly resolved     bin: { firmata: './repl.js' },
38 silly resolved     devDependencies: { mocha: '>=0.13.x', should: '>=0.5.x' },
38 silly resolved     dependencies: { serialport: '>=0.7.5' },
38 silly resolved     scripts: { test: 'mocha test/firmata.js' },
38 silly resolved     engines: { node: '*' },
38 silly resolved     readme: '[![Build Status](https://secure.travis-ci.org/jgautier/firmata.png)](http://travis-ci.org/jgautier/firmata)\n#Firmata\nA Node library to interact with an Arduino running the firmata protocol.\n#Install\n    npm install -g firmata\n#Tests\nThe tests are written with expresso and assume you have the async library install globally.  It also assumes you have an Arduino Uno running firmata 2.2 with a photocell and an LED hooked up.\n#Usage\n    \n    var firmata = require(\'firmata\');\n    var board = new firmata.Board(\'path to usb\',function(){\n      //arduino is ready to communicate\n    });  \n#REPL\nIf you run *firmata* from the command line it will prompt you for the usb port.  Then it will present you with a REPL with a board variable available.\n#Board\n  The Board object is where all the functionality is for the library.\n##attributes\n  *Board.MODES*\n    \n    {\n     INPUT:0x00,\n     OUTPUT:0x01,\n     ANALOG:0x02,\n     PWM:0x03,\n     SERVO:0x04   \n    }\n  This is an enumeration of the different modes available.  This are used in calls to the *pinMode* function.\n\n  *Board.HIGH* and *Board.LOW*\n\n  These are constants used to set a digital pin low or high.  Used in calls to the *digitalWrite* function.\n\n  *Board.pins*\n\n  This is an array of all the pins on the arduino board.\n\n  Each value in the array is an object:\n\n    {\n     mode://current mode of pin which is on the the board.MODES.\n    ,value://current value of the pin. when pin is digital and set to output it will be Board.HIGH or Board.LOW.  If the pin is an analog pin it will be an numeric value between 0 and 1023.\n    ,supportedModes://an array of modes from board.MODES that are supported on this pin.\n    ,analogChannel://will be 127 for digital pins and the pin number for analog pins.\n    }\n\n  This array holds all pins digital and analog. To get the analog pin number as seen on the arduino board use the analogChannel attribute.\n\n  *Board.analogPins*\n\n  This is an array of all the array indexes of the analog pins in the *Board.pins* array.  \n  For example to get the analog pin 5 from the *Board.pins* attributes use:\n\n    board.pins[board.analogPins[5]];\n##methods\n    board.pinMode(pin,mode)\n\n  Set a mode for a pin.  pin is the number of the pin and the mode is on of the Board.MODES values.\n\n    board.digitalWrite(pin,value)\n\n  Write an output to a digital pin.  pin is the number of the pin and the value is either board.HGH or board.LOW.\n\n    board.digitalRead(pin,callback)\n\n  Read a digital value from the pin.  Evertime there is data for the pin the callback will be fired with a value argument.  \n\n    board.analogWrite(pin,value)\n\n  Write an output to a digital pin.  pin is the number of the pin and the value is between 0 and 255.  \n\n    board.analogRead(pin,callback)\n\n  Read an input for an analog pin.  Every time there is data on the pin the callback will be fired with a value argument. \n\n    board.servoWrite(pin,degree)\n  Set I2C Config on the arduino\n  \n    board.sendI2CConfig(delay)\n\n  Write a degree value to a servo pin.\n\n    board.sendI2CWriteRequest(slaveAddress,[bytes])\n\n  Write an array of bytes to a an I2C device.\n\n    board.sendI2CReadRequest(slaveAddress,numBytes,function(data))\n\n  Requests a number of bytes from a slave I2C device.  When the bytes are received from the I2C device the callback is called with the byte array.\n  \n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Julian Gautier &lt;julian.gautier@alumni.neumont.edu&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
38 silly resolved     readmeFilename: 'readme.md',
38 silly resolved     _id: 'firmata@0.2.4',
38 silly resolved     _from: 'firmata@' } ]
39 info install firmata@0.2.4 into /usr/local/lib
40 info installOne firmata@0.2.4
41 verbose from cache /home/admin/.npm/firmata/0.2.4/package/package.json
42 info /usr/local/lib/node_modules/firmata unbuild
43 verbose read json /usr/local/lib/node_modules/firmata/package.json
44 verbose tar unpack /home/admin/.npm/firmata/0.2.4/package.tgz
45 silly lockFile ced6dfaa-r-local-lib-node-modules-firmata /usr/local/lib/node_modules/firmata
46 verbose lock /usr/local/lib/node_modules/firmata /home/admin/.npm/ced6dfaa-r-local-lib-node-modules-firmata.lock
47 silly lockFile 68d6cfab-in-npm-firmata-0-2-4-package-tgz /home/admin/.npm/firmata/0.2.4/package.tgz
48 verbose lock /home/admin/.npm/firmata/0.2.4/package.tgz /home/admin/.npm/68d6cfab-in-npm-firmata-0-2-4-package-tgz.lock
49 silly gunzTarPerm modes [ '755', '644' ]
50 error Error: EACCES, mkdir '/usr/local/lib/node_modules/firmata'
50 error  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/firmata']
50 error   errno: 3,
50 error   code: 'EACCES',
50 error   path: '/usr/local/lib/node_modules/firmata',
50 error   fstream_type: 'Directory',
50 error   fstream_path: '/usr/local/lib/node_modules/firmata',
50 error   fstream_class: 'DirWriter',
50 error   fstream_stack:
50 error    [ '/usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23',
50 error      '/usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53',
50 error      'Object.oncomplete (fs.js:107:15)' ] }
51 error Please try running this command again as root/Administrator.
52 error System Linux 2.6.38-16-generic
53 error command "node" "/usr/local/bin/npm" "install" "-g" "firmata"
54 error cwd /home/admin/programming/javascript/keynotes
55 error node -v v0.10.2
56 error npm -v 1.2.16
57 error path /usr/local/lib/node_modules/firmata
58 error fstream_path /usr/local/lib/node_modules/firmata
59 error fstream_type Directory
60 error fstream_class DirWriter
61 error code EACCES
62 error errno 3
63 error stack Error: EACCES, mkdir '/usr/local/lib/node_modules/firmata'
64 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/fstream/lib/dir-writer.js:36:23
64 error fstream_stack /usr/local/lib/node_modules/npm/node_modules/mkdirp/index.js:37:53
64 error fstream_stack Object.oncomplete (fs.js:107:15)
65 verbose exit [ 3, true ]
